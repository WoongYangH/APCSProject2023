import javax.swing.ImageIcon;
import javax.swing.JLabel;

public class Bubble extends JLabel implements Moveable{
		public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public Player getPlayer() {
		return player;
	}
	public void setPlayer(Player player) {
		this.player = player;
	}
	public boolean isLeft() {
		return left;
	}
	public void setLeft(boolean left) {
		this.left = left;
	}
	public boolean isRight() {
		return right;
	}
	public void setRight(boolean right) {
		this.right = right;
	}
	public boolean isUp() {
		return up;
	}
	public void setUp(boolean up) {
		this.up = up;
	}
	public int getState() {
		return state;
	}
	public void setState(int state) {
		this.state = state;
	}
	public ImageIcon getBubble() {
		return bubble;
	}
	public void setBubble(ImageIcon bubble) {
		this.bubble = bubble;
	}
	public ImageIcon getBubbled() {
		return bubbled;
	}
	public void setBubbled(ImageIcon bubbled) {
		this.bubbled = bubbled;
	}
	public ImageIcon getBomb() {
		return bomb;
	}
	public void setBomb(ImageIcon bomb) {
		this.bomb = bomb;
	}
	public boolean isLeftWallCrash() {
		return leftWallCrash;
	}
	public void setLeftWallCrash(boolean leftWallCrash) {
		this.leftWallCrash = leftWallCrash;
	}
	public boolean isRightWallCrash() {
		return rightWallCrash;
	}
	public void setRightWallCrash(boolean rightWallCrash) {
		this.rightWallCrash = rightWallCrash;
	}
	public int getSPEED() {
		return SPEED;
	}
	public int getJUMPSPEED() {
		return JUMPSPEED;
	}
		// position
		private int x;
		private int y;
		
		private BubbleFrame mContext;
		private Player player;
		private Enemy enemy;
		private BackgroundBubbleService backgroundBubbleService;
		
		// movement
		private boolean left;
		private boolean right;
		private boolean up;
		
		private int state; // 0(bubble) , 1 (bubble with captured player)
		
		private ImageIcon bubble; //0
		private ImageIcon bubbled; //1
		private ImageIcon bomb; 
		// wall collision
		private boolean leftWallCrash;
		private boolean rightWallCrash;
		
		private final int SPEED = 4; //constant
		private final int JUMPSPEED = 2;    
		
		public Bubble(BubbleFrame mContext) {
			this.mContext = mContext;
			this.player = mContext.getPlayer();
			this.enemy = mContext.getEnemy();
			initObject();
			initSetting();
			
		}
		
	
		private void initObject() {
			bubble = new ImageIcon("image/bubble.png");
			bubbled = new ImageIcon("image/bubbled.png");
			bomb = new ImageIcon("image/bomb.png");
			
			backgroundBubbleService = new BackgroundBubbleService(this);
		}
		private void initSetting() {
		left = false;
		right = false;
		up = false;
		
		x=player.getX();
		y=player.getY();
		
		setIcon(bubble);
		setSize(50,50);
		state=0;
		}
		@Override
		public void left() {
			left = true;
			for (int i=0; i<400; i++) {
				x--;
				setLocation(x,y);
				
				if (backgroundBubbleService.leftWall()) {
					left = false;
					break;
				}
				if (Math.abs(x-enemy.getX())<10 
						&& Math.abs(y-enemy.getY())>0 && Math.abs(y-enemy.getY())<50) {
					System.out.println("bubble and enemy collided");
					if (enemy.getState()==0) {
						attack();
						break;
					}
				}
				try {
					Thread.sleep(1);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			up();
			
		}
		@Override
		public void right() {
			right = true;
			for (int i=0; i<400; i++) {
				x++;
				setLocation(x,y);
				
				if (backgroundBubbleService.rightWall()) {
					right = false;
					break;
				}
				if (Math.abs(x-enemy.getX())<10 
						&& Math.abs(y-enemy.getY())>0 && Math.abs(y-enemy.getY())<50) {
					System.out.println("bubble and enemy collided");
					if (enemy.getState()==0) {
						attack();
						break;
					}
				}
				try {
					Thread.sleep(1);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			up();
			
		}
		@Override
		public void up() {
			up = true;
		while(up) {
			y--;
			setLocation(x,y);
			
			if (backgroundBubbleService.topWall()) {
				up = false;
				break;
			}
			
			try {
				if (state ==0) { //og
					Thread.sleep(1);
				} else {
					Thread.sleep(10);
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		if(state==0)
		clearBubble();
		}
		public void attack() {
			state = 1;
			enemy.setState(1);
			setIcon(bubbled);
			mContext.remove(enemy);
			mContext.repaint();
			}
		private void clearBubble() {
			try {
				Thread.sleep(3000);
				setIcon(bomb);
				Thread.sleep(500);
				mContext.remove(this);
				mContext.repaint();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		public void clearBubbled() {
			new Thread(()-> {
				System.out.println("clearbubbled");
				try {
					up = false;
					setIcon(bomb);
					Thread.sleep(1000);
					mContext.remove(this);
					mContext.repaint();
					
				} catch(Exception e) {
					e.printStackTrace();
				}
			}).start();
		}
}


import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JLabel;

import bubble.test.ex04.Moveable;

public class Player extends JLabel implements Moveable{

	private BubbleFrame mContext;
	private List<Bubble> bubbleList;
	// position
	private int x;
	private int y;
	// movement
	private boolean left;
	private boolean right;
	private boolean up;
	private boolean down;
	
	private PlayerWay playerWay;
	
	//enum
	
	
	public PlayerWay getPlayerWay() {
		return playerWay;
	}

	public void setPlayerWay(PlayerWay playerWay) {
		this.playerWay = playerWay;
	}

	// wall collision
	private boolean leftWallCrash;
	private boolean rightWallCrash;
	
	private final int SPEED = 4; //constant
	private final int JUMPSPEED = 3;
	
	private ImageIcon playerR, playerL;
	
	public boolean isLeftWallCrash() {
		return leftWallCrash;
	}

	public void setLeftWallCrash(boolean leftWallCrash) {
		this.leftWallCrash = leftWallCrash;
	}

	public boolean isRightWallCrash() {
		return rightWallCrash;
	}

	public void setRightWallCrash(boolean rightWallCrash) {
		this.rightWallCrash = rightWallCrash;
	}
	
	
	
	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public boolean isLeft() {
		return left;
	}

	public void setLeft(boolean left) {
		this.left = left;
	}

	public boolean isRight() {
		return right;
	}

	public void setRight(boolean right) {
		this.right = right;
	}

	public boolean isUp() {
		return up;
	}

	public void setUp(boolean up) {
		this.up = up;
	}

	public boolean isDown() {
		return down;
	}

	public void setDown(boolean down) {
		this.down = down;
	}
	
	public Player(BubbleFrame mContext) {
		this.mContext = mContext;
		initObject();
		initSetting();
		initBackgroundPlayerService();
	}

	private void initObject() {
		playerR = new ImageIcon("image/playerR.png");
		playerL = new ImageIcon("image/playerL.png");
		bubbleList = new ArrayList<>();
	}
	private void initSetting() {
		x=80;
		y=540;
		
		left = false;
		right = false;
		up = false;
		down = false;
		
		leftWallCrash = false;
		rightWallCrash = false;
		
		playerWay = PlayerWay.RIGHT;
		setIcon(playerR);
		setSize(50,50);
		setLocation(x,y);
	}
	private void initBackgroundPlayerService() {
		new Thread(new BackgroundPlayerService(this)).start(); // runnable type (target)
	}
	public void attack() {
		new Thread(()-> {
			Bubble bubble = new Bubble(mContext);
			mContext.add(bubble);
			bubbleList.add(bubble);
			if(playerWay == PlayerWay.LEFT) {
				bubble.left();
			} else {
				bubble.right();
			}
		}).start();
	}
	public static void main(String[] args) {

	}

	public void left() {
		playerWay = PlayerWay.LEFT;
		System.out.println("left");
		left = true;
		new Thread(()->{ // runnable
			while(left) {
				setIcon(playerL);
				x-=SPEED;
				setLocation(x,y);	
				try {
					Thread.sleep(5); // 0.1 second
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			
		}).start();
	}

	public ImageIcon getPlayerR() {
		return playerR;
	}

	public void setPlayerR(ImageIcon playerR) {
		this.playerR = playerR;
	}

	public ImageIcon getPlayerL() {
		return playerL;
	}

	public void setPlayerL(ImageIcon playerL) {
		this.playerL = playerL;
	}

	public int getSPEED() {
		return SPEED;
	}

	public int getJUMPSPEED() {
		return JUMPSPEED;
	}

	public void right() {
		playerWay = PlayerWay.RIGHT;
		System.out.println("right");
		right = true;
		new Thread(()->{ // runnable
			while (right) { 
			setIcon(playerR);
			x+=SPEED;
			setLocation(x,y); 
			try {
				Thread.sleep(3); // 0.1 second
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			}
		}).start();
		
	}
	// left + up, right + up
	public void up() {
		System.out.println("right");
		right = true;
		new Thread(()->{
			for (int i=0; i<130/JUMPSPEED; i++) {
				y-=JUMPSPEED;
				setLocation(x,y);
				try {
					Thread.sleep(10); //main call
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			up = false;
			down();
		}).start();
	}

	public void down() {
		System.out.println("down");
		down = true;
		new Thread(()->{
			while(down) {
				y+=JUMPSPEED;
				setLocation(x,y);
				try {
					Thread.sleep(3); //main call
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			down = false;
		}).start();
	}

	

	public List<Bubble> getBubbleList() {
		return bubbleList;
	}

	public void setBubbleList(List<Bubble> bubbleList) {
		this.bubbleList = bubbleList;
	}
	

}

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.List;

import javax.imageio.ImageIO;

// main thread - keyboard
//always observe player's movement
public class BackgroundPlayerService implements Runnable{

	private BufferedImage image;
	private Player player;
	private List<Bubble> bubbleList;
	public BackgroundPlayerService(Player player) {
		this.player =  player;
		this.bubbleList = player.getBubbleList();
		try {
			image= ImageIO.read(new File("image/backgroundMapService.png"));
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
	public void run() {
		while (true) {
			
			for (int i=0; i<bubbleList.size(); i++) {
				Bubble bubble = bubbleList.get(i);
				if (bubbleList.get(i).getState() ==1) {
					if (Math.abs(player.getX()-bubble.getX())<10 
							&& Math.abs(player.getY()-bubble.getY())>0 && Math.abs(player.getY()-bubble.getY())<50) {
						System.out.println("killed the enemy");
						bubble.clearBubbled();
						break;
					}
				}
			}
		Color leftColor = new Color(( image.getRGB(player.getX()-10, player.getY()+25)));
		Color rightColor = new Color(( image.getRGB(player.getX()+50+15, player.getY()+25)));
		int bottomColor = image.getRGB(player.getX()+10, player.getY()+55)+image.getRGB(player.getX()+40, player.getY()+55);
		
		if (bottomColor!=-2) {
			player.setDown(false);
		} 
		
		if (leftColor.getRed()==255 && leftColor.getGreen()==0 && leftColor.getBlue()==0) {
			player.setLeftWallCrash(true);
			player.setLeft(false);
		} else if (rightColor.getRed()==255 && rightColor.getGreen()==0 && rightColor.getBlue()==0) {
			player.setRightWallCrash(true);
			player.setRight(false);
		} else {
			player.setLeftWallCrash(false);
			player.setRightWallCrash(false);
		}
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		}
	} 

}

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class BubbleFrame extends JFrame{
	private JLabel backgroundMap;
	private Player player;
	private BubbleFrame mContext= this; 
	private Enemy enemy;
public BubbleFrame() {
	initObject();
	initSetting();
	initListener();
	setVisible(true);
}
	private void initObject() {
		backgroundMap = new JLabel(new ImageIcon("image/backgroundMap.png")); //client background
		setContentPane(backgroundMap);
		player = new Player(mContext); //init
		add(player); // add to the map
		enemy = new Enemy(mContext);
		add(enemy);
	}
	
	private void initSetting() {
		setSize(1000,640);//width, height
		setLayout(null); // absolute layout (Freely draw), getcontentpane
		
		setLocationRelativeTo(null); // JFrame center
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	private void initListener() {
		addKeyListener(new KeyAdapter() { //built-in interface
			public void keyPressed(KeyEvent e) {
				System.out.println(e.getKeyCode());
				
				switch(e.getKeyCode()) {
				
				case KeyEvent.VK_LEFT:
					if (!player.isLeft() && !player.isLeftWallCrash()) {
					player.left();
					}
					break;
					
				case KeyEvent.VK_RIGHT:
					if (!player.isRight() && !player.isRightWallCrash()) {
					player.right();
					}
					break;
				
				case KeyEvent.VK_UP:
					if (!player.isUp() && !player.isDown()) { // ***
					player.up();
					}
					break;
				case KeyEvent.VK_SPACE:
					player.attack();
					break;
				}
			}
			
			public void keyReleased(KeyEvent e) {
				switch(e.getKeyCode()) {
				case KeyEvent.VK_LEFT:
					player.setLeft(false);
					break;
				case KeyEvent.VK_RIGHT:
					player.setRight(false);
					break;
				}
			}
		});
		
	}
	public Player getPlayer() {
		return player;
	}
	public void setPlayer(Player player) {
		this.player = player;
	}
	public static void main(String[] args) {
		new BubbleFrame();

	}
	public JLabel getBackgroundMap() {
		return backgroundMap;
	}
	public void setBackgroundMap(JLabel backgroundMap) {
		this.backgroundMap = backgroundMap;
	}
	public BubbleFrame getmContext() {
		return mContext;
	}
	public void setmContext(BubbleFrame mContext) {
		this.mContext = mContext;
	}
	public Enemy getEnemy() {
		return enemy;
	}
	public void setEnemy(Enemy enemy) {
		this.enemy = enemy;
	}
	
	
}


import javax.swing.ImageIcon;
import javax.swing.JLabel;

import bubble.test.ex04.Moveable;

public class Enemy extends JLabel implements Moveable{

	private BubbleFrame mContext;
	// position
	private int x;
	private int y;
	// movement
	private boolean left;
	private boolean right;
	private boolean up;
	private boolean down;
	
	private int state;
	private EnemyWay enemyWay;
	
	//enum
	
	
	

	// wall collision
	private boolean leftWallCrash;
	private boolean rightWallCrash;
	
	private final int SPEED = 3; //constant
	private final int JUMPSPEED = 1;
	
	private ImageIcon enemyR, enemyL;
	
	public boolean isLeftWallCrash() {
		return leftWallCrash;
	}

	public void setLeftWallCrash(boolean leftWallCrash) {
		this.leftWallCrash = leftWallCrash;
	}

	public boolean isRightWallCrash() {
		return rightWallCrash;
	}

	public void setRightWallCrash(boolean rightWallCrash) {
		this.rightWallCrash = rightWallCrash;
	}
	
	
	
	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public boolean isLeft() {
		return left;
	}

	public void setLeft(boolean left) {
		this.left = left;
	}

	public boolean isRight() {
		return right;
	}

	public void setRight(boolean right) {
		this.right = right;
	}

	public boolean isUp() {
		return up;
	}

	public void setUp(boolean up) {
		this.up = up;
	}

	public boolean isDown() {
		return down;
	}

	public void setDown(boolean down) {
		this.down = down;
	}
	
	public Enemy(BubbleFrame mContext) {
		this.mContext = mContext;
		initObject();
		initSetting();
		initBackgroundEnemyService();
		right();
	}

	private void initObject() {
		enemyR = new ImageIcon("image/enemyR.png");
		enemyL = new ImageIcon("image/enemyL.png");
	}
	private void initSetting() {
		x=480;
		y=178;
		
		left = false;
		right = false;
		up = false;
		down = false;
	
		state =0 ;
		enemyWay = EnemyWay.RIGHT;
		setIcon(enemyR);
		setSize(50,50);
		setLocation(x,y);
	}
	private void initBackgroundEnemyService() {
		new Thread(new BackgroundEnemyService(this)).start(); // runnable type (target)
	}
	public void attack() {
		new Thread(()-> {
			Bubble bubble = new Bubble(mContext);
			mContext.add(bubble);
			if(enemyWay == EnemyWay.LEFT) {
				bubble.left();
			} else {
				bubble.right();
			}
		}).start();
	}
	public static void main(String[] args) {

	}

	public void left() {
		enemyWay = EnemyWay.LEFT;
		System.out.println("left");
		left = true;
		new Thread(()->{ // runnable
			while(left) {
				setIcon(enemyL);
				x-=SPEED;
				setLocation(x,y);	
				try {
					Thread.sleep(5); // 0.1 second
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			
		}).start();
	}

	

	public int getSPEED() {
		return SPEED;
	}

	public int getJUMPSPEED() {
		return JUMPSPEED;
	}

	public void right() {
		enemyWay = EnemyWay.RIGHT;
		System.out.println("right");
		right = true;
		new Thread(()->{ // runnable
			while (right) { 
			setIcon(enemyR);
			x+=SPEED;
			setLocation(x,y); 
			try {
				Thread.sleep(3); // 0.1 second
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			}
		}).start();
		
	}
	// left + up, right + up
	public void up() {
		System.out.println("right");
		right = true;
		new Thread(()->{
			for (int i=0; i<130/JUMPSPEED; i++) {
				y-=JUMPSPEED;
				setLocation(x,y);
				try {
					Thread.sleep(10); //main call
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			up = false;
			down();
		}).start();
	}

	public void down() {
		System.out.println("down");
		down = true;
		new Thread(()->{
			while(down) {
				y+=JUMPSPEED;
				setLocation(x,y);
				try {
					Thread.sleep(3); //main call
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			down = false;
		}).start();
	}

	public BubbleFrame getmContext() {
		return mContext;
	}

	public void setmContext(BubbleFrame mContext) {
		this.mContext = mContext;
	}

	public EnemyWay getEnemyWay() {
		return enemyWay;
	}

	public void setEnemyWay(EnemyWay enemyWay) {
		this.enemyWay = enemyWay;
	}

	public ImageIcon getEnemyR() {
		return enemyR;
	}

	public void setEnemyR(ImageIcon enemyR) {
		this.enemyR = enemyR;
	}

	public ImageIcon getEnemyL() {
		return enemyL;
	}

	public void setEnemyL(ImageIcon enemyL) {
		this.enemyL = enemyL;
	}

	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}
	

}

public enum EnemyWay {
	LEFT, RIGHT;
}

public interface Moveable {
	public abstract void left();
	public abstract void right();
	public abstract void up();
	default public void down(){};
	default public void attack(){};
}